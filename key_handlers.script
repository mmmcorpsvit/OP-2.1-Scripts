local cheat_wnd
local shift_state=false

local keys={
	["press"]={
		[DIK_keys.DIK_F1]={
			func=function(key,binded_action)
				if shift_state then
					local f = getFS()
					if f:exist("$game_scripts$", "test.script") then
						local test_name = f:update_path("$game_scripts$", "test.script")
						run_file(test_name)	
					end					
				end
			end
		},
		[DIK_keys.DIK_F2]={
			func=function(key,binded_action) 
				if shift_state then
					local f = getFS()
					if f:exist("$game_scripts$", "test2.script") then
						local test_name = f:update_path("$game_scripts$", "test2.script")
						run_file(test_name)	
					end	
				end
			end
		},
		-- [DIK_keys.DIK_F3]={
			-- func=function(key,action)
				
			-- end
		-- },
		[DIK_keys.DIK_F4]={
			data={},
			func=function(key,action)
				if shift_state then
					utils.set_coords_visible(not utils.get_coords_visible())
				else
					if not cheat_wnd then
						cheat_wnd = positioninformer.pi()
					end
					cheat_wnd:showposinfo()
					level.start_stop_menu(level.main_input_receiver(), true)
					level.start_stop_menu(cheat_wnd, true)
				end
			end
		},
		[DIK_keys.DIK_LSHIFT]={
			func=function()
				shift_state=true
			end			
		}
	},
	["release"]={
		[DIK_keys.DIK_LSHIFT]={
			func=function()
				shift_state=false
			end			
		}
	},
}

function handle_release(key,binded_action)
	handler(key,binded_action,false)
end

function handle_press(key,binded_action)
	handler(key,binded_action,true)
end

function handler(key,binded_action,state)
	local get_handler=function(key_input,key_state)
		local handler_base=keys[key_state and "press" or "release"]
		if handler_base then
			local handler_key=handler_base[key_input]
			if handler_key then
				local handler_func=handler_key["func"]
				if not handler_func then
					log("! ERROR invalid key hundler table struct!")
					return nil
				end
				return handler_func
			end
		end
		return nil
	end
	
	local func=get_handler(key,state)
	if func then
		func(key,binded_action)
	end
end

function run_file(file)
	local res, err = pcall(run_chunk, file)
	if err then
		console:show()
		log(tostring(err))
	end
	console:execute("flush")
end
function run_chunk(file)
    local chunk, err = dofile(file)
end
