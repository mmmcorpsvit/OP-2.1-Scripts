function getter_user_param(param_name,default)
	local value=console:get_user_param_value(param_name)
	if not value or (value and value=="") then
		return default
	else
		return value
	end
end

function get_bool_user_param(param_name,default)
	if not default then
		default=false
	end
	local param_value=getter_user_param(param_name)
	if not param_value then
		return default
	else
		return param_value=="on"
	end
end

function get_number_user_param(param_name,default)
	if not default then
		default=-1
	end
	local param_value=tonumber(getter_user_param(param_name,default))
	if not param_value then
		return default
	else
		return param_value
	end
end

function setter_user_param(param_name,value)
	console:set_user_param_value(param_name,value)
end

function set_bool_user_param(param_name,value)
	setter_user_param(param_name,value and "on" or "off")
end

function set_number_user_param(param_name,value)
	setter_user_param(param_name,value and tostring(value) or tostring(-1))
end
	
function getter_console_param(param_name,default)
	local value = console:get_string(param_name)
	if not value or (value and value=="") then
		return default
	else
		return value
	end
end

function get_bool_console(param_name,default)
	local value=getter_console_param(param_name,default)
	value=(value=="on" or value=="1") and true or false
	return value
end

function setter_console_param(param_name,value)
	console:execute(param_name.." "..value)
end
function set_bool_console(param_name,value)
	setter_console_param(param_name,value and "on" or "off")
end

local amk_radio_hud_emul={[1]="amk_hud_disabled",[2]="amk_hud_enabled",[3]="amk_hud_and_steam_enabled"}
local amk_radio_treasure_emul={[1]="amk_treasure_old",[2]="amk_treasure_new",[3]="amk_treasure_rare"}

local god_used_times=function(times)
	if times == 0 or not game_is_running() then
		return ""
	else
		return " ("..translate("god_used")..": "..times..")"
	end
end
	
local options=
{	
	--если какой нибуть из шаблонов присутсвует в описании элемента - он будет использован вместо этого
	["template_file"]="ui_creator.xml",
	["template_label"]="label_element_template",	--шаблон для UILabel
	["template_check"]="check_element_template",	--шаблон для UICheckBox
	["template_edit"]="edit_element_template",		--шаблон для UIEditBox
	["template_track"]="track_element_template",		--шаблон для CUITrack
	--["template_combo"]="combo_element_template",		--шаблон для CUIComboBox
	["template_spin_text"]="spin_text_template",		--шаблон для CUISpinTextCustom
	["template_adorned"]="adorned_template",
	["template_text"]="text_template",				--шаблон для текстового поля
	["template_button"]="button_template",				--шаблон для кнопки
	{	--ui_mm_options_op21_group_title2
		["text"]="ui_mm_options_op21_group_title2",--текст для заголовка, если он пустой, будет использован из шаблона
		--[[	
			["etype"]="combo",
			["text"]="ui_mm_difficulty",
			["template_combo"]="list_resolution",
			["fill"]=function(combo_box) 
				combo_box:AddItem(game.translate_string("gd_novice"),0)
				combo_box:AddItem(game.translate_string("gd_stalker"),1)
				combo_box:AddItem(game.translate_string("gd_veteran"),2)
				combo_box:AddItem(game.translate_string("gd_master"),3)
				combo_box:SetListLength(5)
			end,
			["load"]=function() return "" end,
			["save"]=function(param_value)  end
		},--]]
		{ 	--g_game_difficulty
			["etype"]="spin_text",
			["text"]="ui_mm_difficulty",
			["fill"]=function(creator,spin) 
				spin:AddItem("gd_novice",0)
				spin:AddItem("gd_stalker",1)
				spin:AddItem("gd_veteran",2)
				spin:AddItem("gd_master",3)
				spin:SetSpinButtonCallback(function(old_index,new_index) 
					local info=creator:find_node_ui("hud_info")
					local dist=creator:find_node_ui("hud_crosshair_dist")
					if spin:GetSelectedId()==3 then
						if info then
							info:SetCheck(false)
							info:Enable(false)
							set_bool_console("hud_info", false)
						end
						if dist then
							dist:SetCheck(false)
							dist:Enable(false)
							set_bool_console("hud_crosshair_dist",false)
						end
					else
						if info then
							info:Enable(true)
						end
						if dist then
							dist:Enable(true)
						end
					end
				end)

			end,			
			["load"]=function() 
				return getter_console_param("g_game_difficulty","gd_novice") 
			end,
			["save"]=function(param_value) 
				setter_console_param("g_game_difficulty",param_value) 
				_G.Inventory.need_update = true
			end
		},
		{ 	--autochange_difficulty
			["etype"]="check",
			["text"]="ui_mm_autochange_difficulty",		
			["load"]=function() return get_bool_user_param("autochange_difficulty") end,
			["save"]=function(param_value) set_bool_user_param("autochange_difficulty",param_value) end
		},
		{ 	--button
			["etype"]="button",
			["text"]="ui_mm_huds",
			["enable"]=function() return get_multihuds():enabled()	end,
			["click"]=function(handler) 
				handler.huds=ui_mm_opt_huds.opt_huds(handler)
				handler.huds:InitControls()
				handler.parent_wnd:AttachChild(handler.huds)
				handler.huds:Show(true)
				--and load data :(
				local value=getter_console_param("g_current_hud","default")
				handler.huds.art_panel_state:SetCheck(get_bool_console("hud_art_panel_visible"))
			end,
			["load"]=function(handler) end,
			["save"]=
				function(handler)  
					if handler.huds then
						if handler.huds.start_profile_name ~= getter_console_param("g_current_hud","default") then
							get_multihuds():ReloadHUD()
						end
						local value=handler.huds.art_panel_state:GetCheck()
						set_bool_console("hud_art_panel_visible",value)
					end
				end,
			["cancel"]=
				function(handler) 
					if handler.huds then
						if handler.huds.start_profile_name ~= getter_console_param("g_current_hud","default") then
							setter_console_param("g_current_hud",handler.huds.start_profile_name)
						end
					end
				end,

		},
		{	--hud_crosshair
			["etype"]="check",
			["text"]="ui_mm_show_crosshair",		
			["load"]=function() return get_bool_console("hud_crosshair") end,
			["save"]=function(param_value) set_bool_console("hud_crosshair",param_value) end
		},
		{	--cl_dynamiccrosshair
			["etype"]="check",
			["text"]="ui_mm_dyn_crosshair",		
			["load"]=function() return get_bool_console("cl_dynamiccrosshair") end,
			["save"]=function(param_value) set_bool_console("cl_dynamiccrosshair",param_value) end
		},
		{	--hud_weapon
			["etype"]="check",
			["text"]="ui_mm_show_weapon",		
			["load"]=function() return get_bool_console("hud_weapon") end,
			["save"]=function(param_value) set_bool_console("hud_weapon",param_value) end
		},
		{	--hud_crosshair_dist
			["etype"]="check",
			["text"]="ui_mm_crosshair_distance",
			["name"]="hud_crosshair_dist",
			["load"]=function() return get_bool_console("hud_crosshair_dist") end,
			["save"]=function(param_value) set_bool_console("hud_crosshair_dist",param_value) end,
			["fill"]=function(creator,check) 
				local diff=getter_console_param("g_game_difficulty","gd_novice") 
				if diff=="gd_master" then
					check:Enable(false)
					set_bool_console("hud_crosshair_dist",false)
				end
			end
		},
		{	--hud_info
			["etype"]="check",
			["text"]="ui_mm_tips",	
			["name"]="hud_info",			
			["load"]=function() return get_bool_console("hud_info") end,
			["save"]=function(param_value) set_bool_console("hud_info",param_value) end,
			["fill"]=function(creator,check) 
				local diff=getter_console_param("g_game_difficulty","gd_novice") 
				if diff=="gd_master" then
					check:Enable(false)
					set_bool_console("hud_info",false)
				end
			end
		},
		{	--dynamic_bioradar
			["etype"]="check",
			["text"]="ui_mm_bioradar",		
			["load"]=function() 
				db.dynamic_bioradar = get_bool_user_param("dynamic_bioradar")
				if level.present() then
					biodetector.biodetectorRemove()
				end
				return db.dynamic_bioradar
			end,
			["save"]=function(param_value) 
				db.dynamic_bioradar = param_value
				if level.present() then
					biodetector.biodetectorRemove()
				end
				set_bool_user_param("dynamic_bioradar",db.dynamic_bioradar) 
			end
		},
		{ 	--autosave_enable
			["etype"]="check",
			["text"]="ui_mm_autosave",		
			["load"]=function() return get_bool_user_param("autosave_enable") end,
			["save"]=function(param_value) set_bool_user_param("autosave_enable",param_value) end
		},
		{	--dialog_numbered
			["etype"]="check",
			["text"]="ui_mm_options_op21_dialog_numbered",		
			["load"]=function() return get_bool_console("dialog_numbered") end,
			["save"]=function(param_value) set_bool_console("dialog_numbered",param_value) end
		},
		{	--ext_animations
			["etype"]="check",
			["text"]="ui_mm_animations",		
			["load"]=function() return get_bool_user_param("ext_animations") end,
			["save"]=function(param_value) set_bool_user_param("ext_animations",param_value) end
		},
		{	--autograb_body
			["etype"]="check",
			["text"]="ui_mm_autograb",		
			["load"]=function() return get_bool_user_param("autograb_body") end,
			["save"]=function(param_value) set_bool_user_param("autograb_body",param_value) end
		},
		{	--hud_min_crosshair
			["etype"]="check",
			["text"]="ui_mm_options_op21_hud_min_crosshair",		
			["load"]=function() return get_bool_console("hud_min_crosshair") end,
			["save"]=function(param_value) set_bool_console("hud_min_crosshair",param_value) end
		},		
		{	--new_sms
			["etype"]="check",
			["text"]="ui_mm_sms",		
			["load"]=function() return get_bool_user_param("new_sms") end,
			["save"]=function(param_value) set_bool_user_param("new_sms",param_value) end
		},
		{	--user_name
			["etype"]="edit",
			["text"]="ui_mm_name",	
			["name"]="user_name_edit",
			["load"]=function() return getter_user_param("user_name",old_user_name()) end,
			["save"]=function(param_value) setter_user_param("user_name",param_value) end
		},
		{	--buy_item
			["etype"]="edit",
			["text"]="ui_mm_buy",
			["name"]="buy_items_edit",
			["template_edit"]="two_frame_element",	--строка заголовка над строкой ввода
			["template_adorned"]="adorned_two_frame", --темплейт на две линии
			["load"]=function() 
				local value=getter_user_param("buy_item","nil")
				if value=="nil" then 
					return ""
				end
				return value
			end,
			["save"]=function(param_value) 
				if param_value=="" then
					param_value="nil"
				end
				setter_user_param("buy_item",param_value) 
				ui_mm_opt_add.buy_quest_item()
			end
		},
		{	--invalid_objects
			["etype"]="edit",
			["text"]="ui_mm_del",	
			["name"]="invalid_items_edit",			
			["template_edit"]="two_frame_element",	
			["template_adorned"]="adorned_two_frame",			
			["load"]=function() 
				local value=getter_user_param("invalid_objects","nil")
				if value=="nil" then 
					return ""
				end
				return value
			end,
			["save"]=function(param_value) 
				if param_value=="" then
					param_value="nil"
				end
				setter_user_param("invalid_objects",param_value) 
				if game_is_running() then 
					ui_mm_opt_add.del_bad_objects()
					ui_mm_opt_add.send_bad_objects_info()
				end
			end
		}
	},	
	{	--ui_mm_options_op21_group_title
		["text"]="ui_mm_options_op21_group_title", 		
		{	--ui_show_focused
			["etype"]="check", 								--тип элемента
			["text"]="ui_mm_options_op21_show_focused",		--текст для данного элемента
			--результат этой функции будет помещен в значение UI элемента, желательно, чтобы функция учитывала и отсутствие параметра
			["load"]=function() return get_bool_console("ui_show_focused") end,
			--значение элемента будет передано как параметр при сохранении 
			["save"]=function(param_value) set_bool_console("ui_show_focused",param_value) end
		},
		{	--ui_show_selected
			["etype"]="check",
			["text"]="ui_mm_options_op21_show_selected",		
			["load"]=function() return get_bool_console("ui_show_selected") end,
			["save"]=function(param_value) set_bool_console("ui_show_selected",param_value) end
		},
		{	--ui_show_extdesc
			["etype"]="check",
			["text"]="ui_mm_options_op21_show_extdesc",		
			["load"]=function() return get_bool_console("ui_show_extdesc") end,
			["save"]=function(param_value) set_bool_console("ui_show_extdesc",param_value) end
		},
		{	--ui_show_conditions
			["etype"]="check",
			["text"]="ui_mm_options_op21_show_condition",		
			["load"]=function() return get_bool_console("ui_show_conditions") end,
			["save"]=function(param_value) set_bool_console("ui_show_conditions",param_value) end
		},
		{	--gp_show_modificators
			["etype"]="check",
			["text"]="ui_mm_options_op21_show_modificators",		
			["load"]=function() return get_bool_console("gp_show_modificators") end,
			["save"]=function(param_value) set_bool_console("gp_show_modificators",param_value) end
		},
		{	--ui_show_trade_sb
			["etype"]="check",
			["text"]="ui_mm_options_op21_show_sb",		
			["load"]=function() return get_bool_console("ui_show_trade_sb") end,
			["save"]=function(param_value) set_bool_console("ui_show_trade_sb",param_value) end
		},
		{	--ui_allow_operations_tsb
			["etype"]="check",
			["text"]="ui_mm_options_op21_allow_tsb",		
			["load"]=function() return get_bool_console("ui_allow_operations_tsb") end,
			["save"]=function(param_value) set_bool_console("ui_allow_operations_tsb",param_value) end
		}
	},
	{	--ui_mm_options_op21_group_title3
		["text"]="ui_mm_options_op21_group_title3",
		{	--gp_deffered_reload
			["etype"]="check",
			["text"]="ui_mm_options_op21_deffered_reload",		
			["load"]=function() return get_bool_console("gp_deffered_reload") end,
			["save"]=function(param_value) set_bool_console("gp_deffered_reload",param_value) end
		},
		{	--gp_demand_reload
			["etype"]="check",
			["text"]="ui_mm_options_op21_demand_reload",		
			["load"]=function() return get_bool_console("gp_demand_reload") end,
			["save"]=function(param_value) set_bool_console("gp_demand_reload",param_value) end
		},
		{	--gp_fixed_reload
			["etype"]="check",
			["text"]="ui_mm_options_op21_fixed_reload",		
			["load"]=function() return get_bool_console("gp_fixed_reload") end,
			["save"]=function(param_value) set_bool_console("gp_fixed_reload",param_value) end
		},
		{	--gp_sticky_scope
			["etype"]="check",
			["text"]="ui_mm_options_op21_sticky_scope",		
			["load"]=function() return get_bool_console("gp_sticky_scope") end,
			["save"]=function(param_value) set_bool_console("gp_sticky_scope",param_value) end
		},
		{	--gp_open_scope
			["etype"]="check",
			["text"]="ui_mm_options_scope_open",		
			["load"]=function() return get_bool_console("gp_open_scope") end,
			["save"]=function(param_value) set_bool_console("gp_open_scope",param_value) end
		},
	},
	{	--ui_mm_god_options
		["text"]="ui_mm_god_options", 		
		{	--ui_mm_god_warning
			["etype"]="text",
			["text"]="ui_mm_god_warning",
		},
		{ 	--ui_mm_god_invul
			["etype"]="check",
			["text"]=function()	
				local value=game.translate_string("ui_mm_god_invul")
				if game_is_running() then
					value=value..god_used_times(db.god.c[1]) 
				end
				return value
			end,
			["enable"]=function() return game_is_running() end,
			["load"]=function() 
				if game_is_running() then
					return db.god.u[1]
				end
				return false 
			end,
			["save"]=function(param_value) 
				if game_is_running() then
					db.god.u[1]=param_value
					if db.god.u[1] then
						danger.god_add_invul()
					else
						danger.god_remove_invul()
					end
					ui_mm_opt_main.GodHudUpdate()
				end
			end
		},
		{ 	--ui_mm_god_item
			["etype"]="check",
			["text"]=function()	
				local value=game.translate_string("ui_mm_god_item")
				if game_is_running() then
					value=value..god_used_times(db.god.c[2]) 
				end
				return value
			end,
			["enable"]=function() return game_is_running() end,
			["load"]=function() 
				if game_is_running() then
					return db.god.u[2]
				end
				return false 
			end,
			["save"]=function(param_value) 
				if game_is_running() then
					db.god.u[2]=param_value
					ui_mm_opt_main.GodHudUpdate()
				end
			end
		},
		{ 	--ui_mm_god_jump
			["etype"]="check",
			["text"]=function()	
				local value=game.translate_string("ui_mm_god_jump")
				if game_is_running() then
					value=value..god_used_times(db.god.c[3]) 
				end
				return value
			end,
			["enable"]=function() return game_is_running() end,
			["load"]=function() 
				if game_is_running() then
					return db.god.u[3]
				end
				return false 
			end,
			["save"]=function(param_value) 
				if game_is_running() then
					db.god.u[3]=param_value
					ui_mm_opt_main.GodHudUpdate()
				end
			end
		},
		{ 	--ui_mm_god_coll
			["etype"]="check",
			["text"]=function()	
				local value=game.translate_string("ui_mm_god_coll")
				if game_is_running() then
					value=value..god_used_times(db.god.c[4]) 
				end
				return value
			end,
			["enable"]=function() return game_is_running() end,
			["load"]=function() 
				if game_is_running() then
					return db.god.u[4]
				end
				return false 
			end,
			["save"]=function(param_value) 
				if game_is_running() then
					db.god.u[4]=param_value
					if db.god.u[4] then
						valerich_treasures.add_coll_spot()
					else
						valerich_treasures.remove_coll_spot()
					end
					ui_mm_opt_main.GodHudUpdate()
				end
			end
		},
		{ 	--ui_mm_god_docs
			["etype"]="check",
			["text"]=function()	
				local value=game.translate_string("ui_mm_god_docs")
				if game_is_running() then
					value=value..god_used_times(db.god.c[5]) 
				end
				return value
			end,
			["enable"]=function() return game_is_running() end,
			["load"]=function() 
				if game_is_running() then
					return db.god.u[5]
				end
				return false 
			end,
			["save"]=function(param_value) 
				if game_is_running() then
					db.god.u[5]=param_value
					if db.god.u[5] then
						kostya_dialog.add_docs_spot()
					else
						kostya_dialog.remove_docs_spot()
					end
					ui_mm_opt_main.GodHudUpdate()
				end
			end
		},
		{ 	--ui_mm_god_tele
			["etype"]="check",
			["text"]=function()	
				local value=game.translate_string("ui_mm_god_tele")
				if game_is_running() then
					value=value..god_used_times(db.god.c[6]) 
				end
				return value
			end,
			["enable"]=function() 
				return game_is_running() and not has_info("god_loc")
			end,
			["load"]=function() 
				if game_is_running() then
					return db.god.u[6]
				end
				return false 
			end,
			["save"]=function(param_value) 
				if game_is_running() then
					db.god.u[6]=param_value
					if db.god.u[6] then
						give_info("god_loc")
					end
					ui_mm_opt_main.GodHudUpdate()
				end
			end
		}
	},
	{	--ui_mm_amk_options
		["text"]="ui_mm_amk_options", 
		{	--amk_option_hud 
			["etype"]="spin_text",
			["text"]="ui_amk_opt_rad_hud",
			["fill"]=function(creator,spin) 
				for id,data in ipairs(amk_radio_hud_emul) do 
					spin:AddItem(data,id)
				end
			end,
			["load"]=function() 
				local value=get_number_user_param("amk_option_hud",2)
				if not value or value==-1 then
					value=1
				end				
				return amk_radio_hud_emul[value]
			end,
			["save"]=function(param_value) 
				set_number_user_param("amk_option_hud",table.invert(amk_radio_hud_emul)[param_value]) 
				ui_hud_mask.init_settings()
			end
		},
		{	--amk_option_treasure 
			["etype"]="spin_text",
			["text"]="ui_amk_opt_treasure",
			["fill"]=function(creator,spin) 
				for id,data in ipairs(amk_radio_treasure_emul) do 
					spin:AddItem(data,id)
				end
			end,
			["load"]=function() 
				local value=get_number_user_param("amk_option_treasure",1)
				if not value or value==-1 then
					value=1
				end				
				return amk_radio_treasure_emul[value]
			end,
			["save"]=function(param_value) 
				set_number_user_param("amk_option_treasure",table.invert(amk_radio_treasure_emul)[param_value]) 

			end
		},
		{	--amk_option_mus  
			["etype"]="check",
			["text"]="ui_amk_opt_mus",		
			["load"]=function() return get_bool_user_param("amk_option_mus") end,
			["save"]=function(param_value) set_bool_user_param("amk_option_mus",param_value) end
		}
	},
	{	--ui_mm_hardcore
		["text"]="ui_mm_hardcore", 		
		{
			["etype"]="check",
			["text"]="ui_mm_fast_respawn",		
			["load"]=function() return get_bool_user_param("fast_respawn") end,
			["save"]=function(param_value) set_bool_user_param("fast_respawn",param_value) end
		},
		{
			["etype"]="check",
			["text"]="ui_mm_transparent_treasure",		
			["load"]=function() return get_bool_user_param("transparent_treasure") end,
			["save"]=function(param_value) 
				transparent_treasure.scan()
				set_bool_user_param("transparent_treasure",param_value) 
			end
		}
	},
	
	{	--ui_mm_new_game
		["text"]="ui_mm_new_game", 		
		{
			["etype"]="check",
			["text"]="ui_mm_start_zone_door",		
			["load"]=function() return get_bool_user_param("zone_doors",false) end,
			["save"]=function(param_value) set_bool_user_param("zone_doors",param_value) end
		}
	},
	
	{	--ui_mm_options_op21_group_title4
		["text"]="ui_mm_options_op21_group_title4",
		{	--pause_on_load
			["etype"]="check",
			["text"]="ui_mm_autopause",		
			["load"]=function() return get_bool_user_param("pause_on_load") end,
			["save"]=function(param_value) set_bool_user_param("pause_on_load",param_value) end
		},
		{	--pause_on_load_call_sound
			["etype"]="check",
			["text"]="ui_mm_call_sound",		
			["load"]=function() return get_bool_user_param("pause_on_load_call_sound") end,
			["save"]=function(param_value) set_bool_user_param("pause_on_load_call_sound",param_value) end
		},
		{	--ls_show_progress
			["etype"]="check",
			["text"]="ui_options_op21_ls_show_progress",		
			["load"]=function() return get_bool_console("ls_show_progress",false) end,
			["save"]=function(param_value) set_bool_console("ls_show_progress",param_value) end
		},
		--[[ -- working, by disabled due to moddevelopers request
		{	--ls_text_offset_x
			["etype"]="track",
			["text"]="ui_options_op21_ls_text_offset_x",		
			["max"]=1024,
			["load"]=function() 
				local val_con=console:get_float("ls_text_offset_x")
				if val_con==0 then
					local ratio = (1024/768)/(screen.width/screen.height)
					val_con=40*ratio
				end
				return val_con
			end,
			["save"]=function(param_value) console:execute("ls_text_offset_x "..tostring(param_value)) end
		},
		{	--ls_text_offset_y
			["etype"]="track",
			["text"]="ui_options_op21_ls_text_offset_y",
			["max"]=768,
			["load"]=function() 
				local val_con=console:get_float("ls_text_offset_y")
				if val_con==0 then
					local ratio = (1024/768)/(screen.width/screen.height)
					val_con=120*ratio
				end
				return val_con
			end,
			["save"]=function(param_value) console:execute("ls_text_offset_y "..tostring(param_value)) end
		}
		--]]
	}
}

class "COptCreator" (CUIWindow)--(CUIScriptWnd)

function COptCreator:__init(x,y,w,h,parent) super()
	self.template_xml=CScriptXmlInit()
	self.template_xml:ParseFile(options["template_file"])
	self:Init(x,y,w,h)
	self:SetAutoDelete(true)
	self.parent_wnd=parent.dialog
	self.handler=parent
	self.nodes={}
end

function COptCreator:__finalize()
end

function COptCreator:generate_controls()
	self.background = self.template_xml:InitFrame("background", self) --основной бакграунд
	self.scroll_box = self.template_xml:InitScrollView("scroll_box", self) --основной скролл
	for id,group_data in ipairs(options) do --пройдемся по группам элементов
		local adorner=self.template_xml:InitStatic(options["template_adorned"],self.scroll_box) --обрамление
		local group_label=self.template_xml:InitLabel(options["template_label"],adorner) --заголовок группы
		group_label:SetText(game.translate_string(group_data["text"])) --с текстом
		for id,node_data in ipairs(group_data) do --пройдемся по элементам группы
			local node={}
			if node_data["etype"]=="check" then --если это чекбокс
				--получим имя темплейта для элемента 
				local node_template_name=node_data["template_check"] and node_data["template_check"] --если он описан для конкретной ноды
										or options["template_check"]--иначе возмем с главного конфига
				local adorner_template_name=node_data["template_adorned"] and node_data["template_adorned"] or options["template_adorned"]
				local adorner=self.template_xml:InitStatic(adorner_template_name,self.scroll_box) --обрамление
				node["ui"]=self.template_xml:InitCheck(node_template_name,adorner) --сам элемент
				if type(node_data["text"])=="function" then
					node["ui"]:SetText(node_data["text"]())	
				else
					node["ui"]:SetText(game.translate_string(node_data["text"]))	
				end
				if node_data["enable"] then
					node["ui"]:Enable(node_data["enable"]())
				end
				if node_data["fill"] then
					node_data["fill"](self,node["ui"])
				end				
			elseif node_data["etype"]=="text" then --если это просто текст
				local node_template_name=node_data["template_text"] and node_data["template_text"] or options["template_text"]
				local adorner_template_name=node_data["template_adorned"] and node_data["template_adorned"] or options["template_adorned"]
				local adorner=self.template_xml:InitStatic(adorner_template_name,self.scroll_box) --обрамление
				local caption=self.template_xml:InitStatic(node_template_name..":caption",adorner) --текст перед строкой редактирования
				if type(node_data["text"])=="function" then
					caption:SetText(node_data["text"]())
				else
					caption:SetText(game.translate_string(node_data["text"]))	
				end
				adorner:SetHeight(caption:GetHeight())
				if node_data["enable"] then
					node["ui"]:Enable(node_data["enable"]())
				end				
			elseif node_data["etype"]=="edit" then --если это эдитбокс
				local node_template_name=node_data["template_edit"] and node_data["template_edit"] or options["template_edit"]
				local adorner_template_name=node_data["template_adorned"] and node_data["template_adorned"] or options["template_adorned"]
				local adorner=self.template_xml:InitStatic(adorner_template_name,self.scroll_box) --обрамление
				local caption=self.template_xml:InitStatic(node_template_name..":caption",adorner) --текст перед строкой редактирования
				if type(node_data["text"])=="function" then
					caption:SetText(node_data["text"]())
				else
					caption:SetText(game.translate_string(node_data["text"]))	
				end
				node["ui"]=self.template_xml:InitEditBox(node_template_name..":edit_box",adorner) --едитбокс
				if node_data["name"] then
					node["ui"]:LoadSettings(node_data["name"])
				end
				if node_data["enable"] then
					node["ui"]:Enable(node_data["enable"]())
				end				
				if node_data["fill"] then
					node_data["fill"](self,node["ui"])
				end	
			elseif node_data["etype"]=="track" then --если это эдитбокс
				local node_template_name=node_data["template_track"] and node_data["template_track"] or options["template_track"]
				local adorner_template_name=node_data["template_adorned"] and node_data["template_adorned"] or options["template_adorned"]
				local adorner=self.template_xml:InitStatic(adorner_template_name,self.scroll_box) --обрамление
				local caption=self.template_xml:InitStatic(node_template_name..":caption",adorner)
				if type(node_data["text"])=="function" then
					caption:SetText(node_data["text"]())	
				else
					caption:SetText(game.translate_string(node_data["text"]))	
				end
				node["ui"]=self.template_xml:InitTrackBarCustom(node_template_name..":track",adorner)				
				node["ui"]:SetMaxValue(node_data["max"] and node_data["max"] or 1)
				node["ui"]:SetMinValue(node_data["min"] and node_data["min"] or 0)
				node["ui"]:ShowDynamicValue(true)
				if node_data["enable"] then
					node["ui"]:Enable(node_data["enable"]())
				end				
				if node_data["fill"] then
					node_data["fill"](self,node["ui"])
				end	
			elseif node_data["etype"]=="spin_text" then --если это спин для текста
				local node_template_name=node_data["template_spin_text"] and node_data["template_spin_text"] or options["template_spin_text"]
				local adorner_template_name=node_data["template_adorned"] and node_data["template_adorned"] or options["template_adorned"]
				local adorner=self.template_xml:InitStatic(adorner_template_name,self.scroll_box) --обрамление
				local caption=self.template_xml:InitStatic(node_template_name..":caption",adorner)
				if type(node_data["text"])=="function" then
					caption:SetText(node_data["text"]())
				else
					caption:SetText(game.translate_string(node_data["text"]))	
				end
				node["ui"]=self.template_xml:InitSpinTextCustom(node_template_name..":spin",adorner)
				if node_data["enable"] then
					node["ui"]:Enable(node_data["enable"]())
				end				
				if node_data["fill"] then
					node_data["fill"](self,node["ui"])
				end
			elseif node_data["etype"]=="button" then
				local node_template_name=node_data["template_button"] and node_data["template_button"] or options["template_button"]
				local adorner_template_name=node_data["template_adorned"] and node_data["template_adorned"] or options["template_adorned"]
				local adorner=self.template_xml:InitStatic(adorner_template_name,self.scroll_box) --обрамление
				node["ui"]=self.template_xml:Init3tButton(node_template_name,adorner)				
				node["ui"]:SetText(game.translate_string(node_data["text"]))
				if node_data["enable"] then
					local enabled=node_data["enable"]()
					node["ui"]:Enable(enabled)
					if enabled then
						self.handler:Register(node["ui"],node_data["text"])
						self.handler:AddCallback(node_data["text"], ui_events.BUTTON_CLICKED, node_data["click"], self)
					end
				end
				--[[elseif node_data["etype"]=="combo" then --если это комбобокс (выпадающий список)	
				local node_template_name=node_data["template_combo"] and node_data["template_combo"] or options["template_combo"]
				--local adorner=self.template_xml:InitStatic(options["template_adorned"],self.scroll_box)
				--local caption=self.template_xml:InitStatic(node_template_name..":caption",adorner)
				--caption:SetText(game.translate_string(node_data["text"]))				
				node["ui"]=self.template_xml:InitComboBox(node_template_name,self.scroll_box)	
				--log("before")
				--self.scroll_box:BringToTop(node["ui"])
				--log("after")
				--node["ui"]=self.template_xml:InitComboBoxCustom(node_template_name..":combo",self.scroll_box)					
				--node["ui"]:SetOwner(self)
				--node_data["fill"](node["ui"])--]]
			else
				node=nil
				log("! COptCreator:generate_controls unknown node type [%s]",node_data["etype"])
			end
			if node then
				node["load"]=node_data["load"]
				node["cancel"]=node_data["cancel"]
				node["save"]=node_data["save"]
				node["etype"]=node_data["etype"]
				node["name"]=node_data["name"]
				table.insert(self.nodes,node)
			end
		end
	end
end

function COptCreator:find_node_ui(node_name)
	for key,data in pairs(self.nodes) do
		if data["name"] and data["name"]==node_name then
			return data["ui"]
		end
	end
	return nil
end


function COptCreator:show()
	if self.huds then
		self.huds:Show(false)
	end
	self:Show(true)
end

function COptCreator:hide()
	self:Show(false)
	if self.huds then
		self.huds:Show(false)
	end
end

function COptCreator:save_values()
	for key,node in pairs(self.nodes) do
		if node["etype"]=="check" then
			node["save"](node["ui"]:GetCheck())
		elseif node["etype"]=="edit" then
			node["save"](node["ui"]:GetText())
		elseif node["etype"]=="track" then
			node["save"](node["ui"]:GetValue())
		elseif node["etype"]=="button" then
			node["save"](self)
		elseif node["etype"]=="spin_text" then
			node["save"](node["ui"]:GetSelectedText())
		elseif node["etype"]=="text" then			
			--ignore this :)
		else
			log("! COptCreator:save_values unknown node type [%s]",node["etype"])
		end
	end
end

function COptCreator:cancel_values()
	for key,node in pairs(self.nodes) do
		if node["cancel"] then
			node["cancel"](self)
		end
	end
end

function COptCreator:load_values()
	for key,node in pairs(self.nodes) do
		if node["etype"]=="check" then
			node["ui"]:SetCheck(node["load"]())
		elseif node["etype"]=="edit" then
			node["ui"]:SetText(node["load"]())
		elseif node["etype"]=="track" then
			node["ui"]:SetValue(node["load"]())
		elseif node["etype"]=="spin_text" then
			node["ui"]:SetSelectedText(node["load"]())	
		elseif node["etype"]=="button" then
			node["load"](self)
		elseif node["etype"]=="text"then			
			--ignore this :)			
		else
			log("! COptCreator:load_values unknown node type [%s]",node["etype"])
		end
	end
end