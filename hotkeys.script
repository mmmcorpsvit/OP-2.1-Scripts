-- Скриптовая обработка "горячих" клавиш в игре. Основано на решении от charsi
local con_command = "mm_net_player_name" -- консольная команда
local def_value = "_" -- значение по умолчанию - символ подчеркивания
local str = ""
 
function init()
	-- инициализируем схему
	local key
	console:execute( con_command .." ".. def_value ) -- инициализируем дефотлным значением, т.к. кнопка не нажата
	
	-- снимаем предыдущие назначения
	unbind_all_keys()
	
	-- перебираем функции в текущем файле
	for k,v in pairs(_G[script_name()]) do
		 -- v это функция, и её имя является кодом клавиши
		if type(v)=='function' and DIK_keys[string.upper(k)] then
			key = "k"..string.gsub(k,"dik_","") -- формируем ключ
			if (key ~= "kf3" and key ~= "kf4") or db.debug_mode then
				console:execute("bind_console "..con_command.." "..k.." "..key) -- биндим кнопку
			end
		end
	end
	
	-- ставим калбеки на нужные события
	set_event_callback(key_bindings.kSCORES, "reminds")
	set_event_callback(key_bindings.kCAM_4, "runner")
	set_event_callback(key_bindings.kCAM_ZOOM_IN, "super_jump")
	set_event_callback(key_bindings.kCAM_ZOOM_OUT, "save_on_level")
end

function set_event_callback(event, func)
	local key
	for k,v in ipairs(bind_to_keyname(event)) do
		if DIK_keys["DIK_"..v] then
			key = "k"..string.gsub(v,"dik_","") -- формируем ключ
			console:execute("bind_console "..con_command.." "..func.." "..key) -- биндим функцию
		end
	end
end

function remove_event_callback(event)
	local key
	for k,v in ipairs(bind_to_keyname(event)) do
		if DIK_keys["DIK_"..v] then
			key = "k"..string.gsub(v,"dik_","") -- формируем ключ
			console:execute("unbind_console "..key) -- разбиндиваем функцию
		end
	end
end

function update()
	-- получаем из консоли значение параметра для нашей команды
	str = console:get_string(con_command) 
	--log("str: "..str)
	-- если оно не является значением по умолчанию
	-- и в этом файле есть функция с таким именем, то выполняем её
	if str~=def_value and this[str] then
		this[str]()
		console:execute(con_command.." "..def_value) -- записываем значение по умолчанию
	end
	
end

local keys = {
	[1] = 'ESCAPE', [2] = '1', [3] = '2', [4] = '3', [5] = '4', [6] = '5', [7] = '6', [8] = '7',
	[9] = '8', [10] = '9', [11] = '0', [12] = 'MINUS', [13] = 'EQUALS', [14] = 'BACK', [15] = 'TAB', [16] = 'Q',
	[17] = 'W', [18] = 'E', [19] = 'R', [20] = 'T', [21] = 'Y', [22] = 'U', [23] = 'I', [24] = 'O', [25] = 'P',
	[26] = 'LBRACKET', [27] = 'RBRACKET', [28] = 'RETURN', [29] = 'LCONTROL', [30] = 'A', [31] = 'S', [32] = 'D',
	[33] = 'F', [34] = 'G', [35] = 'H', [36] = 'J', [37] = 'K', [38] = 'L', [39] = 'SEMICOLON', [40] = 'APOSTROPHE',
	[41] = 'GRAVE', [42] = 'LSHIFT', [43] = 'BACKSLASH', [44] = 'Z', [45] = 'X', [46] = 'C', [47] = 'V', [48] = 'B',
	[49] = 'N', [50] = 'M', [51] = 'COMMA', [52] = 'PERIOD', [53] = 'SLASH', [54] = 'RSHIFT', [55] = 'MULTIPLY',
	[56] = 'LMENU', [57] = 'SPACE', [58] = 'CAPITAL', [59] = 'F1', [60] = 'F2', [61] = 'F3', [62] = 'F4', [63] = 'F5',
	[64] = 'F6', [65] = 'F7', [66] = 'F8', [67] = 'F9', [68] = 'F10', [69] = 'NUMLOCK', [70] = 'SCROLL', [71] = 'NUMPAD7',
	[72] = 'NUMPAD8', [73] = 'NUMPAD9', [74] = 'SUBTRACT', [75] = 'NUMPAD4', [76] = 'NUMPAD5', [77] = 'NUMPAD6',
	[78] = 'ADD', [79] = 'NUMPAD1', [80] = 'NUMPAD2', [81] = 'NUMPAD3', [82] = 'NUMPAD0', [83] = 'DECIMAL', [87] = 'F11',
	[88] = 'F12', [100] = 'F13', [101] = 'F14', [102] = 'F15', [112] = 'KANA', [121] = 'CONVERT', [123] = 'NOCONVERT',
	[125] = 'YEN', [141] = 'NUMPADEQUALS', [144] = 'CIRCUMFLEX', [145] = 'AT', [146] = 'COLON', [147] = 'UNDERLINE',
	[148] = 'KANJI', [149] = 'STOP', [150] = 'AX', [151] = 'UNLABELED', [156] = 'NUMPADENTER', [157] = 'RCONTROL',
	[179] = 'NUMPADCOMMA', [181] = 'DIVIDE', [183] = 'SYSRQ', [184] = 'RMENU', [197] = 'PAUSE', [199] = 'HOME',
	[200] = 'UP', [201] = 'PRIOR', [203] = 'LEFT', [205] = 'RIGHT', [207] = 'END', [208] = 'DOWN', [209] = 'NEXT',
	[210] = 'INSERT', [211] = 'DELETE', [219] = 'LWIN', [220] = 'RWIN', [221] = 'APPS'
	}
--[[Еще есть кнопки мыши, но мы их не биндим:
    const MOUSE_1 = 256;
    const MOUSE_2 = 512;
    const MOUSE_3 = 1024;
--]]

-- Снятие предыдущих назначений bind_console
function unbind_all_keys()
	for k,v in pairs(keys) do
		console:execute("unbind_console k"..v)
	end
end

-- Получение назначенной в опциях игры клавиши
-- Аргумент - код действия из перечисления key_bindings
-- Для спринта bind_to_keyname(key_bindings.kACCEL) вернет таблицу {"X","Y"}, если спринт назначен на X и Y
function bind_to_keyname(event)
	local t = {}

	for k,v in pairs(keys) do
		if DIK_keys["DIK_"..v] and dik_to_bind(DIK_keys["DIK_"..v])==event then 
--			log("key: "..v)
			table.insert(t,v)
		end
	end

	return t
end

function reminds()
	reminder.remind()
	_G.Treasure:remind()
end

function runner()
	if _G.Inventory:on_belt("runner_tele") then
		fly.runner()
	else
		fly.returner()
	end
end


function super_jump()
	if not db.god.u[3] or danger.actor_in_danger() then return end
	if db.actor:active_item() then
		sms("super_jump_0", nil, "nano", 10000)
		return
	end
	
	give_info("teleport_started")
	local pos=db.actor:position()
	db.actor:set_actor_position(xyz(pos.x,pos.y+math.random(4,6),pos.z))
	give_info("teleport_finished")
	db.god.c[3] = db.god.c[3]+1
end

function save_on_level()
    u3_utils.savegame_on_level()
end

-- function dik_f3()
	-- run_file("..\\gamedata\\scripts\\test.script")
-- end
-- function dik_f4()
	-- run_file("..\\gamedata\\scripts\\test2.script")
-- end

function run_file(file)
	local res, err = pcall(run_chunk, file)
	if err then
		console:show()
		log(tostring(err))
	end
	console:execute("flush")
end
function run_chunk(file)
    local chunk, err = dofile(file)
end

