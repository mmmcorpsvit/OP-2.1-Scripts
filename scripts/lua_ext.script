-- Расширения базовых библиотек Lua и движка

-- table

-- Инвертирование таблицы - ключ<->значение
table.invert = function(tbl)
   local result = {}
   for key,value in pairs(tbl) do
     result[value] = key
   end
   return result
end

-- Добавление в таблицу вида {[key] = count} подсчитываемого предмета
table.add = function(tbl, key)
	if tbl[key] then
		tbl[key] = tbl[key]+1
	else
		tbl[key] = 1
	end
end

-- Удаление из таблицы вида {[key] = count} подсчитываемого предмета
table.sub = function(tbl, key)
	if not tbl[key] then
		return
	end
	if tbl[key] == 1 then
		tbl[key] = nil
	else
		tbl[key] = tbl[key]-1
	end
end

-- Выбор случайного элемента таблицы
table.random = function(tbl)
	return tbl[math.random(#tbl)]
end

-- Поиск в таблице key value, пока не используется
table.find = function(tbl, val)
	local t = type(val)
	for k,v in pairs(tbl) do
		if type(v) == t and v == val then
			return true
		end
	end
	return false
end

-- Поиск в таблице список
table.ifind = function(tbl, val)
	local t = type(val)
	for _,v in ipairs(tbl) do
		if v == val then
			return true
		end
	end
	return false
end

-- размер любой таблицы
table.size = function(tbl)
	local count = 0
	for key in pairs(tbl) do 
		count = count+1 
	end
	return count
end

table.strjoin = function(tbl, delimeter)
	if delimeter==nil then
		delimeter=" "
	end
	local copy_table= {}
	table.copy(copy_table,tbl) 
	local str = tostring(table.remove(copy_table, 1))
	for	i,v in pairs(copy_table) do
		str=str..delimeter..tostring(v)
	end
	return str
end

table.strjoin_f = function(tbl, delimeter,func)
	if delimeter==nil then
		delimeter=" "
	end
	local copy_table= {}
	table.copy(copy_table,tbl) 
	local str = func(table.remove(copy_table, 1))
	for	i,v in pairs(copy_table) do
		str=str..delimeter..func(tostring(v))
	end
	return str
end

table.copy = function ( dest, src )
	for k, v in pairs( src ) do
		if type( v ) == "table" then
			--' рекурсивный вызов себя же для подтаблиц
			dest[k] = {}
			table.copy( dest[k], v )
		else
			dest[k] = v
		end
	end
end

-- Печать таблицы
table.print = function (tbl, subs, noflush)
	subs = subs or ""

	for k,v in pairs(tbl) do
		if type(v) == "table" then
			log(subs..tostring(k).." = table:")
			table.print(v, "   "..subs, true)
		elseif type(v) == "userdata" then
			log(subs..tostring(k).." = userdata")
		else
			log(subs..tostring(k).." = "..tostring(v))
		end
	end

	if not noflush then
		console:execute("flush")
	end
end

-- сохранение таблицы в пстор
table.save = function(name, t)
	set_value(name, table.to_string(t))
end

-- загрузка таблицы из пстор
table.load = function(name)
	local t = get_value(name)
	return t == nil and {} or string.to_table(t)
end

--[[ Упаковка таблицы в строку, ex amk.pack_array_to_string. Строки в структуре не должны содержать символов с кодами 0-31.
	Формат упаковки:
	table ::= subtable
	subtable ::= keytype key valuetype ( value | subtable 0x5 )
	keytype ::= ( 0x1 | 0x2 | 0x3 | 0x4 )
	valuetype ::= ( 0x1 | 0x2 | 0x3 | 0x4 )
]]
table.to_string = function(t)
	local type_num = 1
	local type_string = 2
	local type_bool = 3
	local type_table = 4
	local type_endtable = 5
	local tk, tv
	local ret = ""
	
	for k,v in pairs(t) do
		tk = type(k)
		tv = type(v)
		
		if tk == "number" then
			ret = ret..string.char(type_num)..k
		elseif tk == "string" then
			ret = ret..string.char(type_string)..k
		else
			abort("table.to_string: unsupported key type "..tk)
		end
		
		if tv == "number" then
			ret = ret..string.char(type_num)..v
		elseif tv == "string" then
			ret = ret..string.char(type_string)..v
		elseif tv == "boolean" then
			ret = ret..string.char(type_bool)..(v and "1" or "0")
		elseif tv == "table" then
			ret = ret..string.char(type_table)..table.to_string(v)..string.char(type_endtable)
		else
			abort("table.to_string: unsupported value type "..tv)
		end
	end
	
	return ret
end

-- string

-- Удаление начальных и конечных пробелов
string.trim = function(str)
	--out of bugged scripts code!
	if not str then
		return ""
	end

	--return str:match("^%s*(.-)%s*$")
	--more quickly (~30%)
	local from = str:match("^%s*()")
	return from > #str and "" or str:match(".*%S", from)
end

-- Разбирает cтроку в таблицу по разделителю
-- {"substring1", "substring2", ...}
-- clear = true - обрезать пробелы
string.explode = function(str, div, clear)
	local t = {}
	for s in string.gfind(str, "([^"..div.."]+)") do
		if clear then
			table.insert(t, s:trim())
		else
			table.insert(t, s)
		end
	end
	return t
end

string.subcount = function(s1, s2)
    local count = 0
    for i in s1:gmatch(s2) do count = count + 1 end
    return count
end

string.clear = function(str)
	return str:gsub( "%p", function(s) return s:match("[%.%-_]*") end )
end

string.extformat = function(fmt, ...)
	local arg={...}
	local result_str
	local fmtCounts=tostring(fmt):subcount("%%") 
	if fmtCounts>0 then --возможно, это форматная строка
		if string.format then
			for i=1,fmtCounts,1 do --если вдруг нехватает параметров или еще какая беда... О_О
				if arg[i]==nil then
					table.insert(arg,i,"<<nan>>")
				end
			end
			for	i,v in pairs(arg) do --преобразуем некоторые значения к текстовым по умолчанию, остальные - по форматной строке
				if v==nil or v=="" then --LUA 5.1 не имеет конвертора по умолчанию для nil
					arg[i]="<<nan>>"
				end
				if type(v)=="boolean" then --LUA 5.1 не имеет конвертора по умолчанию для boolean
					arg[i]=tostring(v)
				end
			end
			result_str=string.format(fmt,unpack(arg)) --LUA 5.1 unpack in global ns, 5.2 in table ns
		else --если нет string.format - попытаемся вывести все подряд...
			result_str=tostring(fmt).." "..table.strjoin(arg)
		end
	else --если не форматная строка - то просто склеим все подряд
		if arg~=nil and table.size(arg)>0 then
			result_str=tostring(fmt).." "..table.strjoin(arg)
		else
			result_str=fmt
		end
	end
	return result_str
end

-- Парсит строку вида "ааа, ббб, ввв..." в таблицу {"ааа", "ббб", "ввв", ...}
string.parse_names = function (s)
	local t = {}
	
	for name in string.gfind(s, "([%w_\\]+)%p*") do
		table.insert(t, name)
	end

	return t
end

-- разбирает строку вида "n1, n2, n3..." в таблицу {n1, n2, n3, ...} где n1, n2, n3... - числа
string.parse_nums = function (s)
	local t = {}

	for value in string.gfind(s, "([^,]+)") do
		table.insert(t, tonumber(value))
	end

	return t
end

-- разбирает строку key,value,key,value ... в таблицу t = {key = value}
string.key_value = function (str)
	if not str then return nil end
	
    local t = {}
    local key
    for value in string.gfind(str, "[%w%_%.%-%+]+") do
		if key == nil then	-- value это key
			key = value
		else				-- value это value
			t[key] = value
			key = nil
		end
    end
	
    return t
end

-- разбирает строку key,value,key,value ... в таблицу t = {key = value}, value должно быть числом. Его можно не указывать, тогда будет подставляться дефолт def
string.key_value_num = function (str, def)
	if not str then return nil end
	if not def then def = 1 end
	
    local t = {}
    local key, value
    for name in string.gfind(str, "[%w%_%.%-%+]+") do
		--log(""..name)
		value = tonumber(name)
		if key == nil then	-- name это key
			key = name
		elseif value == nil then	-- value не указано, значит это следующий key, ставим def и переносим key
			t[key] = def
			key = name
		else	-- name это value
			t[key] = value
			key = nil
		end
    end
	
	-- цепляем дефолт для последнего key
	if key then
		t[key] = def
	end
	
    return t
end

-- Распаковка строки в таблицу, ex amk.unpack_array_from_string.
string.to_table = function(s, idx)
	if s == nil or s == "" then return {} end

	local type_num = 1
	local type_string = 2
	local type_bool = 3
	local type_table = 4
	local type_endtable = 5
	local key,value
	local tk, tv
	local ret = {}
	idx = idx or 1

	while true do
		if idx > string.len(s) then
			return ret, idx
		end
		
		tk, idx = get_byte(s, idx)
		if tk == type_num then
			key, idx = get_num(s, idx)
		elseif tk == type_string then
			key, idx = get_string(s, idx)
		elseif tk == type_endtable then
			return ret, idx
		else
			abort("string.to_table: unsupported key type "..tk)
		end
		
		tv, idx = get_byte(s, idx)
		if tv == type_num then
			value, idx = get_num(s, idx)
		elseif tv == type_string then
			value, idx = get_string(s, idx)
		elseif tv == type_bool then
			value, idx = get_bool(s, idx)
		elseif tv == type_table then
			value, idx = string.to_table(s, idx)
		else
			abort("string.to_table: unsupported value type "..tv)
		end
		
		ret[key] = value
	end
end

-- math

-- Окргуление до accuracy разрядов. Спасибо ПЫС за наше счастливое детство... пилиять, медленно, но верно...
math.round = function(num, accuracy) 
    return tonumber(string.format('%0.'..(accuracy or 0)..'f', num))
end

-- Выравнивание числа n в пределах от _min до_max
math.clamp = function(n, _min, _max)
	if _min>_max then
		_max,_min=_min,_max
	end
	return (n<_min and _min)
		or (n>_max and _max)
		or n
end

math.nan = (0/0) -- не число

math.isnan = function(value)
	return value ~= value
end

-- game_object
game_object.is_stalker = function (obj)
	return obj:clsid() == clsid.script_stalker
end

game_object.is_monster = function (obj)
	return IAmAMonster[obj:clsid()]~=nil
end

game_object.is_alive = function (obj)
	local cls = obj:clsid()
	return (IAmAStalker[cls] or IAmAMonster[cls]) and obj:alive()
end

game_object.is_wounded = function (obj)
	return obj:is_stalker() and obj:alive() and obj:wounded()
end

-- ini_file, system_ini

--[[ Перебирает все строки в секции ini. Использование:
local tbl = {}
ini:iterate_lines(section, function(result, id, value)
	tbl[...] = ... -- любой скрипт
end)
--]]
ini_file.iterate_lines = function (ini, section, f)
	if ini:section_exist(section) then
		for i=0,ini:line_count(section)-1 do
			f(ini:r_line(section, i, "", ""))
		end
	end
end
config.iterate_lines = ini_file.iterate_lines

-- Из всех значений секции возвращает таблицу t[id] = value. tonum = true - преобразовать в число
ini_file.key_value = function (ini, section, tonum)
	local t = {}

	ini:iterate_lines(section, function(result, id, value)
		t[id] = tonum and tonumber(value) or value
    end)
	
	return t
end
config.key_value = ini_file.key_value

-- Из всех значений секции возвращает список t = {id1, id2 ...}
ini_file.list = function (ini, section)
	local t = {}
	
	ini:iterate_lines(section, function(result, id, value)
		table.insert(t, id)
    end)

	return t
end
config.list = ini_file.list

-- Из всех значений секции возвращает таблицу t[id] = true
ini_file.key_true = function (ini, section)
	local t = {}

	ini:iterate_lines(section, function(result, id, value)
		t[id] = true
    end)
	
	return t
end
config.key_true = ini_file.key_true

-- net_packet

-- Чтение shape
net_packet.r_shape = function(p)
	local s
	local shape = {}
	shape.count = p:r_u8()
	shape.shapes = {}
	for i=1, shape.count do
		s = {}
		s.type = p:r_u8()
		if s.type == 0 then
			s.center = p:r_vec3(vector())
			s.radius = p:r_float()
		else
			s.axis_x = p:r_vec3(vector())
			s.axis_y = p:r_vec3(vector())
			s.axis_z = p:r_vec3(vector())
			s.offset = p:r_vec3(vector())
		end
		shape.shapes[i] = s
	end
	return shape
end

-- Запись shape
net_packet.w_shape = function(p, shape)
	local s
	p:w_u8(shape.count)
	for i=1, shape.count do
		s = shape.shapes[i]
		p:w_u8(s.type)
		if s.type == 0 then
			p:w_vec3(s.center)
			p:w_float(s.radius)
		else
			p:w_vec3(s.axis_x)
			p:w_vec3(s.axis_y)
			p:w_vec3(s.axis_z)
			p:w_vec3(s.offset)
		end
	end
end

-- Чтение CTime
net_packet.r_CTime = function(p)
	local t = game.CTime()
	
	local Y = p:r_u8()
	if Y ~= 0 then
		local M, D, h, m, s, ms = p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u16()
		t:set(Y+2000, M, D, h, m, s, ms)
	end

	return t
end

-- Запись CTime. Если t = nil, то запишет один нулевой байт
net_packet.w_CTime = function(p, t)
	if t and t ~= game.CTime() then
		local time_table = t:get_table()
		p:w_u8(time_table["year"]-2000)
		p:w_u8(time_table["month"])
		p:w_u8(time_table["day"])
		p:w_u8(time_table["hour"])
		p:w_u8(time_table["min"])
		p:w_u8(time_table["sec"])
		p:w_u16(time_table["msec"])
	else
		p:w_u8(0)
	end
end

-- Вспомогательные функции

function get_byte(str,idx)
  return string.byte(string.sub(str,idx,idx)),idx+1
end

function get_string(str,idx)
  local idx1=string.len(str)+1
  for i=idx,string.len(str),1 do
    if string.byte(string.sub(str,i,i))<32 then
      idx1=i
      break
    end
  end
  return string.sub(str,idx,idx1-1),idx1
end

function get_num(str,idx)
  local st,idx1=get_string(str,idx)
  return st+0,idx1
end

function get_bool(str,idx)
  local st,idx1=get_string(str,idx)
  return st=="1",idx1
end

