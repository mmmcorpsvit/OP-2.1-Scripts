-- Вся работа со временем

-- Таймеры
class "CTimer"

function CTimer:__init()
	self.timers = container:get("timers", {})
	
	self.name = nil			-- имя таймера
	self.delay = nil		-- задержка в игровых миллисекундах
	self.params = nil		-- параметры вызова


	-- таблица функций таймеров, постепенно избавиться от нее совсем
	self.timers_table = {
		-- Можно запускать таймеры с любыми именами без прописывания их в эту таблицу. Если таймера нет в таблице, то просто выполнится указанная в params_string функция с параметрами. Например:
		-- timer("any_timer", 2.0, "buusty_dialog.koshmar_peshera(1)")
		-- по истечению таймера вызовет функцию koshmar_peshera(1) из файла buusty_dialog с параметром 1.
		-- Также можно передавать любые переменные, например:
		-- timer("send_archievement", 2.5, "archievements.send_archievement_chunk(\""..text.."\")")
		
		-- острова
		["fli_teleport_actor"] = function (params_string)
			create_teleport(params_string, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		end,
		["fli_teleport_timeout"] = function (params_string)
			local data = string.to_table(params_string)
			create_teleport(data[1], xyz(data[2], data[3], data[4]), data[5], data[6])
		end,
		-- битва
		["battle"] = function (params_string)
			battle.show_must_go_on(params_string)
		end,
		["battle_rest"] = function (params_string)
			battle.reinforcement(params_string)
		end,
		-- взносы
		["stop_tush"] = function (params_string)
			give_info("sidor_music")
		end,
		-- autosave
		["autosave"] = function (params_string)
			if u3_utils.can_save() then
				u3_utils.savegame(params_string)
			else
				timer("autosave", 3, params_string)
			end
		end,
		["autosave_blowout"] = function (params_string)
			if u3_utils.can_save() then
				u3_utils.savegame_date(translate("ui_timers_blowout"))
			else
				timer("autosave_blowout", 3, params_string)
			end
		end,
		["autosave_hell"] = function (params_string)
			if u3_utils.can_save() then
				u3_utils.savegame_date(translate("ui_timers_horror"))
			else
				timer("autosave_hell", 0.2, params_string)
			end
		end,
		["grenade_flash_disable"] = function (params_string)
			disable_info("grenade_flash_blow")
		end,
		["unload_wpn_time"] = function (params_string)
			 local sobj = server_object(params_string)
			 if sobj then
				 local obj = level_object(sobj.id)
				 if obj and not death_manager.unique_wpn[obj:section()] then
					 obj:unload_magazine()
				 end
			 end
		 end,
		["wpn_cond_time"] = function (params_string)
			 local sobj = server_object(params_string)
			 if sobj then
				 local obj = level_object(sobj.id)
				 if obj and not death_manager.unique_wpn[obj:section()] then
					obj:set_condition((math.random(20, 50)+5*(3-level.get_game_difficulty()))/100)
				 end
			 end
		 end,
		["anom_remover"] = function (params_string)
			if not has("art_acumm", 2) then return end
			release(server_object(params_string))
			lost("art_acumm", 2)
		end,
		["mm_opt"] = function (params_string)
			disable_info("mm_opt")
		end,
		-- Новый сон begin
		["cant_wait"] = function (params_string)
			set_value("wait_count", 0)
		end,
		["wait"] = function (params_string)
			set_value("wait_count", 0)
		end,
		["sleep_vodka"] = function (params_string)
			set_value("sleep_vodka", 0)
		end,
		-- Новый сон end
		["af_transform_universal"] = function (params_string)
			amk_mod.af_transform_universal_end(string.to_table(params_string))
		end,
		["blowout"] = function (params_string)
			amk_mod.Blowout_pp(params_string)
		end,
		["outfit_cond"] = function (params_string)
			local data = string.to_table(params_string)
			local a = level_object(data[1])
			if a then
				a:set_condition(data[2]/100)
			end
		end,
		["npc_clear_spawn"] = function (params_string)
			local data = string.to_table(params_string)
			death_manager.npc_clear_spawn(data[1], data[2], data[3], data[4])
		end,
		["healing_enemies"] = function (params_string)
			local arr = string.to_table(params_string)
			local npc_id = arr[1]
			local npc_com = arr[2]
			local npc = level_object(npc_id)
			if npc and npc:alive() and not npc:wounded() then
				if math.random(100) < 80 then
					if math.random() < 0.35 then
						npc:set_character_community(npc_com)
					end
					if math.random() < 0.85 then
						xr_wounded.custom_change(npc)
					end
				else
					npc:set_character_community(npc_com)
					npc:set_relation(game_object.enemy, db.actor)
				end
			end
		end,
		["timer_drop_obj_varka"] = function (params_string)
			local tbl = string.to_table(params_string)
			local sobj = server_object(tbl.obj_id)
			if sobj == nil then
				-- съели
			elseif sobj.parent_id == 65535 then
				-- выбросили, запускаем проверку на рецепт и, если успешно, варку
				local obj	= level_object(tbl.obj_id)
				local anom	= level_object(tbl.anom_id)
				if obj and anom then -- если чего само выпадет или будет вброшено в игру скриптом при переходе ГГ между уровнями, то obj == nil и аномалии тоже не будет
					local obj_sect	= obj:section()
					local obj_pos	= obj:position()
					local anom_sect	= anom:section()
					local anom_pos	= anom:position()
					amk_mod.check_af_transform(obj, obj_sect, obj_pos, tbl.anom_id, anom_sect, anom_pos, tbl.anom_radius, tbl.lv, tbl.gv)
				end
			else
				-- переложили
			end
		end,
		["timer_drop_obj_transform"] = function (params_string)
			local tbl = string.to_table(params_string)
			local sobj = server_object(tbl.obj_id)
			if sobj == nil then
				-- съели
			elseif sobj.parent_id == 65535 then
				-- выбросили, запускаем трансформацию предмета
				local obj = level_object(tbl.obj_id)
				if obj then
					amk_mod.item_transform(tbl.obj_id, tbl.lv, tbl.gv)
				end
			else
				-- переложили
			end
		end,
		["babah_drop_timeBomb"] = function (params_string)
			local tbl = string.to_table(params_string)
			local sobj = server_object(tbl.id)
			if sobj == nil then
				-- съели/использовали
				babah.useTimeBomb(tbl)
			elseif sobj.parent_id == 65535 then
				-- выбросили
				babah.dropTimeBomb(tbl)
			else
				-- переложили
				babah.relocateTimeBomb(tbl)
			end
		end,
		["babah_explode_biside_explosives"] = function (params_string)
			local tbl = string.to_table(params_string)
			babah.explodeBisideExplosives(tbl)
		end,
		["babah_drop_mine"] = function (params_string)
			local tbl = string.to_table(params_string)
			local sobj = server_object(tbl.id)
			if sobj == nil then
				-- съели/использовали
			elseif sobj.parent_id == 65535 then
				-- выбросили
				babah.dropMine(tbl)
			else
				-- переложили
			end
		end,
		["babah_activateMine"] = function (params_string)
			local tbl = string.to_table(params_string)
			local sobj = server_object(tbl.id)
			babah.addMine(sobj)
		end,
		["babah_drop_detonator"] = function (params_string)
			local tbl = string.to_table(params_string)
			local sobj = server_object(tbl.id)
			if sobj == nil then
				-- съели/использовали
				babah.useDetonator(tbl.sect)
			elseif sobj.parent_id == 65535 then
				-- выбросили
			else
				-- переложили
			end
		end,
		["babah_transfer_items"] = function (params_string)
			babah.itemsTransferBackToInventory(string.to_table(params_string))
		end,
	}
end

-- реальный таймер
function CTimer:start(name, delay, params)
	if not delay then return end
	if not params then params = "" end
	if type(params) == "table" then
		params = table.to_string(params)
	end

	table.insert(self.timers, {name, math.floor(game.milliseconds()+delay*1000*config:r_float("alife","time_factor")), params})
	table.sort(self.timers, timers_sort)	-- таймеры с меньшим временем будут в конце таблицы
	--table.print(self.timers)
end

-- игровой таймер
function CTimer:start_game(name, delay_d, delay_h, delay_m, params)
	if delay_d == nil or delay_h == nil or delay_m == nil then return end
	if not params then params = "" end
	if type(params) == "table" then
		params = table.to_string(params)
	end

	table.insert(self.timers, {name, math.floor(game.milliseconds()+(delay_d*60*24+delay_h*60+delay_m)*60*1000), params})
	table.sort(self.timers, timers_sort)	-- таймеры с меньшим временем будут в конце таблицы
	--table.print(self.timers)
end

-- перезапуск реальный таймер
function CTimer:restart(name, delay, params)
	self:remove(name)
	self:start(name, delay, params)
end

-- перезапуск игровой таймер
function CTimer:restart_game(name, delay_d, delay_h, delay_m, params)
	self:remove(name)
	self:start_game(name, delay_d, delay_h, delay_m, params)
end

-- есть ли таймер?
function CTimer:has(name)
	for _,t in ipairs(self.timers) do
		if t[1] == name then
			return true
		end
	end
	return false
end

-- полная информация о таймере
function CTimer:get(name, default)
	for _,t in ipairs(self.timers) do
		if t[1] == name then
			return t
		end
	end
	return default
end

-- удаление таймера
function CTimer:remove(name)
	for i = #self.timers, 1, -1 do
		if self.timers[i][1] == name then
			table.remove(self.timers, i)
		end
	end

	table.sort(self.timers, timers_sort)
end

-- проверка таймеров
function CTimer:update()
	self.milliseconds = game.milliseconds()
	self.to_start = {} -- список таймеров на запуск

	for i = #self.timers, 1, -1 do -- идём с хвоста по таймерам с наименьшим временем срабатывания
		self.name		= self.timers[i][1]
		self.delay		= self.timers[i][2]
		self.params		= self.timers[i][3]
		--if type(self.params) == "table" then
			--self.params = table.to_string(self.params)
		--end
		if self.delay <= self.milliseconds then
			-- таймер сработал
			table.insert(self.to_start, {self.name, self.params})
			table.remove(self.timers)
		else
			break
		end
	end

	-- выполняем таймеры
	for i = 1, #self.to_start do
		self.name		= self.to_start[i][1]
		self.params		= self.to_start[i][2]
		amk.oau_reason = self.name.." "..self.params
		self:trigger()
	end
end

-- сработка таймера
function CTimer:trigger()
	if self.timers_table[self.name] then
		-- вызываем функцию из таблицы
		self.timers_table[self.name](self.params)
	elseif self.params then
		-- в таблице нет, просто вызываем функцию из параметра
		loadstring(self.params)()
	end
end

-- в конце таблицы таймеры с самым маленьким временем
function timers_sort(t1, t2)
	return t1[2] > t2[2]
end

-- работа с игровым временем

-- время начала игры
local start_time

-- получение времени начала игры
function get_start_time()
  local t = string.explode(config:r_string("alife", "start_time"), ":", true)
  local d = string.explode(config:r_string("alife", "start_date"), ".", true)
  start_time = game.CTime()
  start_time:set(tonumber(d[3]), tonumber(d[2]), tonumber(d[1]), tonumber(t[1]), tonumber(t[2]), tonumber(t[3]), 0)
  utils.getStartTime(start_time)
end

-- миллисекунд с начала игры
game.milliseconds = function()
	local time = game.get_game_time()
	local seconds = time:diffSec(start_time)
	local time_table = time:get_table()
	return (seconds*1000+time_table["msec"])
end

-- секунд с начала игры
game.seconds = function()
	return game.get_game_time():diffSec(start_time)
end

-- минут с начала игры
game.minutes = function()
	return math.floor(game.seconds()/60)
end

-- часов с начала игры
game.hours = function()
	return math.floor(game.seconds()/3600)
end

-- дней с начала игры
game.days = function()
	local t = string.explode(config:r_string("alife", "start_time"), ":", true)
	return math.floor((game.seconds()+(t[1]*3600+t[2]*60+t[3]))/86400)	-- Исправление неправильного времени смены дня не в 24:00
end

-- разное

-- Возвращает кол-во игровых миллисекунд до точки во времени
function estimated_game_time(time)
	return time - game.milliseconds()
end

-- Переводит время в миллисекундах в таблицу с ключами days, hours, minutes, seconds, поддерживает максимальные единицы измерения
function format_time(time, max_time)
	max_time = max_time or "days"
	local time_table = {days = 0, hours = 0, minutes = 0, seconds = math.round(time / 1000)}
	local order = {{"seconds", 1000}, {"minutes", 60}, {"hours", 60}, {"days", 24}}
	local counting = false

	for i = 1, #order - 1 do
		time_table[order[i + 1][1]]	= math.floor(time_table[order[i][1]]/ order[i + 1][2])
		time_table[order[i][1]]		= math.fmod	(time_table[order[i][1]], order[i + 1][2])

		if max_time == order[i+1][1] then break end
	end
	return time_table
end
