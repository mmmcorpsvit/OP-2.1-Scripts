-- полет √√
local vel = 30		-- скорость в м/с
local delta = 30	-- интервал обновлени€ в мс. не должен быть меньше 20 и произведение vel*delta должно быть не меньше 900, иначе картинка будет дергатьс€
local time = time_global()
local last_time = time
local last_pos = db.actor:position()
local dt = nil

function start(obj)
	-- новый полет
	if obj:section() ~= "anom_egg" then return end
	
	level.start_stop_menu(level.main_input_receiver(), true)

	-- временный запрет полета - возвращаем предмет
	if has_info("no_gravigun") or (has_info("snp_vesker_start_done") and not has_info("snp_profi_done")) then
		amk.spawn_item_in_inv("anom_egg", db.actor)
		sms("%c[sender]"..translate("name_volazar")..":\\n%c[sms_red]"..translate("sms_volazar_fly_no_0"), nil, nil, 10000, nil, [[sms\volazar\fly_no]]) 
		return
	end

	if db.actor:item_in_slot(6) or db.actor:active_item() then
		-- одета брон€ или не убран ствол
		amk.spawn_item_in_inv("anom_egg", db.actor)
		sms("%c[sender]"..translate("name_volazar")..":\\n%c[sms_red]"..translate("sms_volazar_fly_wpn_0"), nil, nil, 10000, nil, [[sms\volazar\fly_wpn]]) 
		return
	end
	
	timer("run5", 0.5, "fly.wrong_fly()")
	if has_info("vol_fly") then
		snp.invul_on()
	end

	last_pos = db.actor:position()
	last_time = time_global()
	give_info("actor_fly")
end

function update()
	-- собственно полет
	if not has_info("actor_fly") then return end

	if db.actor:active_slot() == 5 or db.actor:item_in_slot(6) then
		-- достали болт или одели броню
		stop()
	end

	time = time_global()
	if time > last_time+delta then
		dt = time-last_time
		db.actor:set_actor_position(vector():mad(last_pos,screen.cam_dir,vel/1000*dt))
		last_pos = db.actor:position()
		last_time = time
	end
end

function stop()
	-- остановка полета
	disable_info("actor_fly")
	
	if has_info("vol_fly") then
		snp.invul_off()
	end
end

function wrong_fly()
	if not has_info("vol_info_temp") and not has_info("sidor_delo_done") then
		sms("%c[sender]"..translate("name_volazar")..":\\n%c[sms_red]"..translate("sms_volazar_wrong_fly_0"), nil, nil, 15000, nil, [[sms\volazar\wrong_fly]]) 
		timer("zonedocs_gg_kill",13.0,"kostya_dialog.zonedocs_gg_kill()")
		level.add_cam_effector("camera_effects\\radar_stop.anm", 2507, false, "")
	end
end

-- ”скоритель √√
function runner()
	if not _G.Inventory:on_belt("runner_tele") then return end
	
	if run_allowed() then
		do_run()
	end
end

function do_run()
	fly.stop()

	local pos = db.actor:position()
	say([[device\bed_2]])
	give_info("teleport_started")
	db.actor:set_actor_position(level.vertex_position(level.vertex_in_direction(db.actor:level_vertex_id(), screen.cam_dir, 900)))
	give_info("teleport_finished")
	
	local path = math.ceil(pos:distance_to(db.actor:position()))
	local pay = path
	db.actor:give_money(-pay)
	game_stats.money_quest_update(-pay) 
	archievements.acv_count_event("acv_run", 30000, "acv_run", path)
end

function run_allowed()
	if has_info("no_teleport_near_heli_btr") then 
		sms("run_allowed_0", nil, "nano", 10000)
		return false
	elseif has_info("snp_proper7014_done") and not has_info("snp_video_arhiv_done") then
		sms("run_allowed_1", nil, "nano", 10000)
		return false
	elseif db.actor:active_item() then
		sms("run_allowed_2", nil, "nano", 10000)
		return false
	elseif actor_is_in_danger() then
		return false
	elseif not has_money(1000) then
		sms("run_allowed_3", nil, "nano", 10000)
		return false
	elseif not drrr.weight_ok() then
		sms("run_allowed_4", nil, "nano", 10000)
		return false
	end
	return true
end

-- наличие опасности в зависимости от уровн€ сложности
function actor_is_in_danger()
	local difficulty = level.get_game_difficulty()
	local danger_text = translate("teleport_in_danger")

	if difficulty < 2 then
		return false
	else
		return danger.actor_in_danger(danger_text, danger_text, difficulty == 2)
	end
end

-- ¬озвращатель √√
local single_click, double_click = nil, nil
local click_timeout = 350
local returner_pos, returner_temp_pos

function returner()
	if single_click then
		-- второе нажатие
		double_click = time_global()+click_timeout
	else
		-- первое нажатие
		single_click = time_global()+click_timeout
		returner_temp_pos = db.actor:position()
	end
end

-- ¬исит на апдейте актора
function returner_update()
	if single_click then
		if single_click > time_global() and double_click then
			-- второе нажатие
			if set_pos_allowed() then
				returner_set_pos()
			end
			
			single_click = nil
			double_click = nil
			
		elseif single_click <= time_global() then
			-- одно нажатие
			if returner_allowed() then
				do_returner()
			end
			
			single_click = nil
			double_click = nil
		end
	end
	
	if returner_pos and db.actor:active_item() then
		returner_pos = nil
	end
end

function returner_set_pos()
	fly.stop()

	say([[device\bed_2]])
	returner_pos = db.actor:position()
end

function returner_clear_pos(obj)
	returner_pos = nil
end

function set_pos_allowed()
	if has_info("no_teleport_near_heli_btr") and not (has_info("snpt_jupiter5_have3") and not has_info("snpt_jupiter6_done")) then 
		sms("set_pos_allowed_0", nil, "nano", 10000)
		return false
	elseif db.actor:active_item() then
		sms("set_pos_allowed_1", nil, "nano", 10000)
		return false
	elseif actor_is_in_danger() then
		return false
	elseif returner_temp_pos:distance_to(db.actor:position()) > 0.001 then 
		sms("set_pos_allowed_2", nil, "nano", 5000)
		return false
	end
	return true
end

function do_returner()
	fly.stop()
	
	say([[device\bed_2]])
	give_info("teleport_started")
	db.actor:set_actor_position(returner_pos)
	give_info("teleport_finished")
end

function returner_allowed()
	if has_info("no_teleport_near_heli_btr") and not (has_info("snpt_jupiter5_have3") and not has_info("snpt_jupiter6_done")) then 
		sms("returner_allowed_0", nil, "nano", 10000)
		return false
	elseif db.actor:active_item() then
		sms("returner_allowed_1", nil, "nano", 10000)
		return false
	elseif actor_is_in_danger() then
		return false
	elseif not returner_pos then 
		sms("returner_allowed_2", nil, "nano", 5000)
		return false
	elseif returner_pos:distance_to_xz(db.actor:position()) > 30 then 
		sms("returner_allowed_3", nil, "nano", 5000)
		return false
	elseif returner_pos:distance_to(db.actor:position()) < 1 then 
		sms("returner_allowed_4", nil, "nano", 5000)
		return false
	end
	return true
end


