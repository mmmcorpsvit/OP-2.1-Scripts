_G.press_any_key_on_start = true

local calls = {
	"trader1a",
	"trader1b",
	"trader3b",
	"trader_script1a_1",
	"trader_script1a_6",
	"trader_script1b_4",
	"trader_script1b_5",
	"trader_script1c_5",
	"trader_tutorial_pda_on_1",
	"trader_tutorial_pda_on_2",
	"trader_tutorial_pda_on_3",
	"trader_tutorial_pda_on_4",
	"trader_tutorial_rejection_1",
	"trader_tutorial_rejection_2",
	"trader_tutorial_rejection_3",
	"trader_tutorial_rejection_4",
}

local function inject_mm_init(func_name)
	local name = "ap_mm_init"
	_G[name] = _G.ui_main_menu.main_menu.__init
	_G.ui_main_menu.main_menu.__init =
		function(...)
			_G[name](...)
			local arg={...}
			loadstring('return _G["'..string.gsub(func_name,"%.",'"]["')..'"]')()(arg[1])
		end
end

local function inject_mm_upd(func_name)
	local name = "ap_mm_upd"
	if not _G.ui_main_menu.main_menu.Update then
		_G.ui_main_menu.main_menu.Update = function()end
	end
	_G[name] = _G.ui_main_menu.main_menu.Update
	_G.ui_main_menu.main_menu.Update =
		function(...)
			_G[name](...)
			local arg={...}
			loadstring('return _G["'..string.gsub(func_name,"%.",'"]["')..'"]')()(arg[1])
		end
end

local function inject_mm_on_kbd(func_name)
	local name = "ap_mm_on_kbd"
	_G[name] = _G.ui_main_menu.main_menu.OnKeyboard
	_G.ui_main_menu.main_menu.OnKeyboard =
		function(...)
			local arg={...}
			if not loadstring('return _G["'..string.gsub(func_name,"%.",'"]["')..'"]')()(arg[1],arg[2],arg[3]) then
				return _G[name](...)
			end
			return true
		end
end

local function inject_actor_update(func_name,flag)
	if not _G.bind_actor.actor_binder["_update"] then
		_G.bind_actor.actor_binder["_update"] = {}
		_G.bind_actor.actor_binder["_update"][1] = _G.bind_actor.actor_binder["update"]
		_G.bind_actor.actor_binder["update"] = function(...)
			for _,f in pairs (_G.bind_actor.actor_binder["_update"]) do f(...) end end
	end
	_G.bind_actor.actor_binder["_update"][func_name] = loadstring('return _G["'..string.gsub(flag and func_name or "_","%.",'"]["')..'"]')()
end

function main()
	if _G.press_any_key_on_start then
		inject_mm_init("autopause.on_mm_init")
		inject_mm_upd("autopause.mm_update")
		inject_mm_on_kbd("autopause.mm_on_kbd")
		inject_actor_update("autopause.on_upd",true)
	end
end
-----------------------------
function on_mm_init(mm)
	if level.present() and _G.press_any_key_on_start then
		_G.press_any_key_on_start = false
		give_info("paused_on_load")
		level.hide_indicators()
		mm.start_btn = CUIStatic()
		mm.start_btn:SetWndRect(Frect():set(0,0,1024,768))
		mm.start_btn:InitTexture("intro\\intro_"..level.name())
		mm.start_btn:SetAutoDelete(true)
		mm.start_btn:SetStretchTexture(true)
		local text=translate("ui_mm_pause_text")
		mm.start_btn:SetText(string.extformat(text,user_name()))
		mm.start_btn:SetTextAlign(CGameFont.alLeft)
		mm.start_btn:SetTextX(console:get_float("ls_text_offset_x"))
		mm.start_btn:SetTextY(console:get_float("ls_text_offset_y")) --vertical align(pixel). set value to -1 for center align
		mm.start_btn:SetFont(GetFontGraffiti19Russian())
		--mm.start_btn:SetClrLightAnim("ui_slow_blinking_alpha",true,true,true,false) --слишком быстро... поэтому оставляем старое на апдейте.
		mm.alpha = 255
		mm:AttachChild(mm.start_btn)
		mm:Show(false)
		mm.sv = level.get_snd_volume()
		mm.sound_volume_eff = console:get_float("snd_volume_eff")
--		console:execute("snd_volume_eff 0")
		mm.sound_volume_music = console:get_float("snd_volume_music")
		console:execute("snd_volume_music 0")
		mm.time_to_call = 0
		mm.call = 0
		mm.prev_call = 0
		mm.stop_call = 20*1000*1000 -- зовем игрока 20 секунд
		mm.tmr = profile_timer() -- создаем таймер
		mm.tmr:start() -- запускаем его
		mm.last_time = 0 -- инициализируем время последнего апдейта
		mm.play_sounds=ui_mm_opt_creator.get_bool_user_param("pause_on_load_call_sound",true)
		_G.ui_main_menu.main_menu.__init = _G.ap_mm_init
	end
end

function mm_update(mm)
	if mm.tmr then
		mm.tmr:stop()
		
		if mm.tmr:time() - mm.last_time > 8000 then --  чем больше значение, тем медленнее моргание надписи 
			mm.last_time = mm.tmr:time()
			--mm.start_btn:SetTextColor(mm.alpha,159,142,126)
			mm.start_btn:SetTextColor(mm.alpha,239, 231, 220)
			if mm.alpha > 250 then mm.step = -2 elseif mm.alpha < 60 then mm.step = 2 end
			mm.alpha = mm.alpha + mm.step
		end
		
		-- зовем игрока
		if mm.play_sounds then 
			if not mm.call_sound or (not mm.call_sound:playing() and mm.time_to_call < mm.tmr:time() and mm.time_to_call < mm.stop_call) then
				repeat
					mm.call = table.random(calls)
				until mm.call ~= mm.prev_call
				mm.call_sound = voice("characters_voice\\scenario\\trader\\"..mm.call)
				mm.call_interval = math.random(4,6)
				mm.call_sound:play(db.actor, mm.call_interval, sound_object.s2d)
				mm.time_to_call = mm.tmr:time()+(mm.call_sound:length()+mm.call_interval*1000)*1000
				mm.prev_call = mm.call
			end
		end
		mm.tmr:start()
		console:hide()
	end
end
function mm_on_kbd(mm,dik, keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if mm.start_btn then
			if mm.play_sounds then
				mm.call_sound:stop()
			end
			level.show_indicators()
			level.set_snd_volume(mm.sv)
			console:execute("snd_volume_eff " .. mm.sound_volume_eff) 
			console:execute("snd_volume_music " .. mm.sound_volume_music)
			_G.ui_main_menu.main_menu.OnKeyboard = _G.ap_mm_on_kbd
			_G.ui_main_menu.main_menu.Update = _G.ap_mm_upd
			console:execute("main_menu off")
			disable_info("paused_on_load")
		end
	end
	return mm.start_btn~=nil
end

function on_upd()
	if screen.precache_frame<3 then
		inject_actor_update("autopause.on_upd",false)
		if _G.g_start_avi then
			_G.ui_main_menu.main_menu.__init = _G.ap_mm_init
			_G.ui_main_menu.main_menu.OnKeyboard = _G.ap_mm_on_kbd
			_G.ui_main_menu.main_menu.Update = _G.ap_mm_upd
		else
			console:execute("main_menu on")
		end
	end
end